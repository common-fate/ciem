syntax = "proto3";

package commonfate.access.v1alpha1;

import "commonfate/control/attest/v1alpha1/attestation.proto";
import "google/protobuf/timestamp.proto";

service UserManagementService {
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {}
}

service ResourceService {
  rpc ListResourcesForProvider(ListResourcesForProviderRequest) returns (ListResourcesForProviderResponse) {}
}

// AccessService is the Access Handler's user-facing API.
// Users call this API to ensure that they have access to entitlements.
service AccessService {
  // Grant is a high-level declarative API which can be called to ensure access has been provisioned to an entitlement.
  //
  // The method checks whether the entitlement has been provisioned to the user.
  // If the entitlement has not been provisioned, an Access Request will be created for the entitlement.
  // If a pending Access Request exists for the entitlement, this request is returned.
  //
  // In future, this method may trigger an extension to any Access Requests which are due to expire.
  // 
  //
  // This method is used by the Common Fate CLI in commands like 'cf exec gcp -- <command>' to ensure access
  // is provisioned prior to running a command.
  rpc Grant(GrantRequest) returns (GrantResponse) {}
}

// ControlPlaneService is the RPC service running in the control plane 
// which is called by the Access Handlers.
service ControlPlaneService {
  // GetExistingAccessRequest checks if there is an existing access request for the particular entitlement.
  // It returns a nil response if no access request exists.
  rpc GetExistingAccessRequest(GetExistingAccessRequestRequest) returns (GetExistingAccessRequestResponse) {}
}

service AccessRequestService {
  rpc ListAccessRequests(ListAccessRequestsRequest) returns (ListAccessRequestsResponse) {}
  rpc GetAccessRequest(GetAccessRequestRequest) returns (GetAccessRequestResponse) {}
  rpc RevokeAccessRequest(RevokeAccessRequestRequest) returns (RevokeAccessRequestResponse) {}
  rpc CancelAccessRequest(CancelAccessRequestRequest) returns (CancelAccessRequestResponse) {}
  rpc ReviewAccessRequest(ReviewAccessRequestRequest) returns (ReviewAccessRequestResponse) {}
}

message GetExistingAccessRequestRequest {
  EntityUID principal = 1;
  string action = 2;
  EntityUID resource = 3;
}

message GetExistingAccessRequestResponse {
  optional AccessRequest access_request = 1;
}

message GrantRequest {
  // to be added in future when 'on-behalf-of' requests are implemented.
  reserved 1;
  reserved "principal";

  string action = 2;
  EntityUID resource = 3;
  Justification justification = 4;
}

enum Decision {
  DECISION_UNSPECIFIED = 0;

  // Access to the resource is allowed.
  DECISION_ALLOWED = 2;

  // Access to the resource requires a manual review.
  DECISION_REVIEW_REQUIRED = 3;

  // Access to the resource is denied.
  DECISION_DENIED = 4;
}

message GrantResponse {
  // An ID which can be used to debug the evaluation of the access policies
  // associated with the request.
  string decision_id = 1;

  // The decision made by the Common Fate authorization engine.
  Decision decision = 2;

  // Indicates if the Access Request returned already existed.
  // Will be false if a new Access Request was created.
  bool request_already_exists = 3;

  // An Access Request. Will be nil if access is already active because the user was assigned
  // persistent access to the entitlement.
  optional AccessRequest access_request = 4;

  // If the access is active, the timestamp that the access expires at.
  // If access is persistent, the expires_at field will be nil.
  optional google.protobuf.Timestamp expires_at = 5;
}

message ListAccessRequestsRequest {
    optional string page = 1;
    optional int32 limit = 2;
}

message ListAccessRequestsResponse {
  repeated AccessRequest access_requests = 1;
  optional string next_page = 2;
}

message GetAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;
}

message GetAccessRequestResponse {
  AccessRequest access_request = 1;
}

message EntityUID {
  string type = 1;
  string id = 2;
}

message Entity {
  EntityUID uid = 1;
  string name = 2;
}

// A request to be given entitlements allowing <Action> to be performed on <Resource>.
//
// For example, if the action is 'Admin', and the resource is AWS::Account::123456789012,
// This request is for entitlements allowing Admin access to the account 123456789012.
message AccessRequest {
  // The ID of the Access Request.
  string id = 1;

  // Batch ID of the Access Request. Access Requests created in the same 
  // API call have the same Batch ID.
  string batch_id = 2;

  // The resource being requested.
  Entity resource = 3;

  // The permissions being requested, such as "View" or "Admin".
  string action = 4;

  // The user or service account that requested the access.
  Entity requestor = 5;

  // The status of the Access Request.
  RequestStatus status = 6;
}

enum RequestStatus {
  REQUEST_STATUS_UNSPECIFIED = 0;
  // Awaiting a manual review.
  REQUEST_STATUS_PENDING_APPROVAL = 9;
  // Being provisioned against the cloud provider.
  REQUEST_STATUS_PROVISIONING = 2;
  // The entitlement the request grants access to is currently active. 
  REQUEST_STATUS_ACTIVE = 1;
  // Being deprovisioned and removed from the cloud provider.
  REQUEST_STATUS_DEPROVISIONING = 3;

  // No longer active. Requests may be inactive due to several reasons, such as:
  // - the request was cancelled by the user
  // - the request was revoked by an administrator
  // - the request has expired
  REQUEST_STATUS_INACTIVE = 7;

  // The Access Request encountered a fatal error.
  REQUEST_STATUS_ERROR = 5;
}

message ListResourcesForProviderRequest {
  EntitlementProvider provider = 1;
  // currently unimplemented
  optional string page = 2;
  // currently unimplemented
  optional int32 limit = 3;
}

message ListResourcesForProviderResponse {
  repeated Entity resources = 1;
  // currently unimplemented
  optional string next_page = 2;
}


message Justification {
  optional string reason = 1;
  optional commonfate.control.attest.v1alpha1.Attestation device_attestation = 2;
}

enum EntitlementProvider {
  ENTITLEMENT_PROVIDER_UNSPECIFIED = 0;
  ENTITLEMENT_PROVIDER_AWS_IDC = 1;
  ENTITLEMENT_PROVIDER_GCP = 2;
}

message ListUsersRequest {
  optional int32 page = 1;
  optional int32 limit = 2;
}

message ListUsersResponse {
  repeated User users = 1;
  int32 current_page = 2;
  optional int32 next_page = 3;
  optional int32 previous_page = 4;
}

message User {
  string id = 1;
  string primary_email = 2;
  string first_name = 3;
  string last_name = 4;
  string avatar = 5;
}

message RevokeAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;
}

message RevokeAccessRequestResponse {
}

message CancelAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;
}

message CancelAccessRequestResponse {
}

enum RequestReviewDecision {
  REQUEST_REVIEW_DECISION_UNSPECIFIED = 0;
  REQUEST_REVIEW_DECISION_APPROVE = 1;
  REQUEST_REVIEW_DECISION_CLOSE = 2;
}
message ReviewAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;
  RequestReviewDecision decision = 2;
}

message ReviewAccessRequestResponse {
}